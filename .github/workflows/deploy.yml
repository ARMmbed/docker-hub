name: publish image to docker hub

# The workflow is split into several sub jobs
# 1. prepare-tags: 
#    This step finds the latest mbed-os version (in terms of product version not date)
#    and generates a unique dev version for the image. 
#    The DEV docker tag takes the format of dev-<MBED_OS_VERSION>-<human readable date>-<UUID>
# 2. build-container:
#    The dev version of image is built here and pushed to docker hub.
#    When multiarch image is built docker buildx doesn't support exporting to docker
#    Hence, need to push to a registry (dockerhub).
# 3. test-container:
#    This tests the dev docker images
# 4. deploy-container
#    At this point, docker image marked as "dev" is ready to tag as "prod"
#    Also, deletes the dev tag
#    The dev images that didn't succeed is kept in docker hub for troubleshooting purposes.
#    Published docker tags are:
#    1. <MBED_OS_VERSION>-latest
#    2. <MBED_OS_VERSION>-<human readable date>
#    3. latest
#    This can be move with another workflow

on:

  schedule:
    - cron:  '15 4 * * *'
    
  push:
    branches: [ master ]


jobs:


  prepare-tags:
    runs-on: ubuntu-latest

    steps:
      - 
        name: Find the latest release mbed-os version
        uses: oprypin/find-latest-tag@v1
        with:
          repository: ARMmbed/mbed-os
          releases-only: true
        id: mbed_os_version
      
      - 
        name: Set UUID
        id: generate-uuid
        uses: filipstefansson/uuid-action@v1

# set docker tags we are building, and intending to publish
# dev-tag is temporary for testing purpose. This should be considered as unstable.
# dated-tag is created for versioning purpose
# prod-tag-latest could be used by customers, CI etc for keeping up to date
      - 
        name: Get build information
        shell: bash
        run: |
          mkdir -p build_info
          date=$(date +"%Y.%m.%dT%H.%M.%S")
          echo dev-${{ steps.mbed_os_version.outputs.tag }}-${date}-${{ steps.generate-uuid.outputs.uuid }} > build_info/dev_tag
          echo ${{ steps.mbed_os_version.outputs.tag }}-${date} > build_info/prod_tag_dated
          echo ${{ steps.mbed_os_version.outputs.tag }}-latest > build_info/prod_tag_latest
          echo ${{ steps.mbed_os_version.outputs.tag }} > build_info/mbed_os_version

      # archiving and unarchiving are github actions ways to pass variables between jobs    
      - 
        name: Archive information 
        uses: actions/upload-artifact@v2
        with:
          name: build-info
          path: build_info
          

  build-container:
    runs-on: ubuntu-latest
    needs: prepare-tags

    steps:
      - 
        name: unarchive artefacts
        uses: actions/download-artifact@v2
        with:
          name: build-info
          
      - 
        name: Get build info from archive
        shell: bash
        id: build_info
        run: |
          value=`cat dev_tag`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_DEV_TAG::$value"
          value=`cat prod_tag_dated`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_PROD_TAG_DATED::$value"
          value=`cat prod_tag_latest`
          echo "::set-output name=DOCKER_PROD_TAG_LATEST::$value"

      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - 
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      -
        name: Checkout
        uses: actions/checkout@v2
        
      -
        name: Build with remote cache
        uses: docker/build-push-action@v2
        id: docker_build_dev
        with:
          context: ./mbed-os-env
          platforms: linux/amd64,linux/arm64 
          push: true
          file: ./mbed-os-env/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mbed-os-env:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/mbed-os-env:latest
          cache-to: type=inline


  test-container:
    runs-on: ubuntu-latest
    needs: build-container
    outputs:
      DEPLOY: ${{ steps.test.outputs.DEPLOY }}
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        
    steps:
      - 
        name: unarchive artefacts
        uses: actions/download-artifact@v2
        with:
          name: build-info
          
      - 
        name: Get build info from archive
        shell: bash
        id: build_info
        run: |
          value=`cat dev_tag`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_DEV_TAG::$value"
          value=`cat prod_tag_dated`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_PROD_TAG_DATED::$value"
          value=`cat prod_tag_latest`
          echo "::set-output name=DOCKER_PROD_TAG_LATEST::$value"
          value=`cat mbed_os_version`
          echo "::set-output name=MBED_OS_VERSION::$value"

      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - 
        name: Checkout
        uses: actions/checkout@v2
            
      - 
        name: Find DOCKER DIGEST trying to publish (if exists in docker hub)
        id: docker_info_prod
        run: |
          DIGEST=$(python ./ci_scripts/docker_hub_utils.py -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }} get-digest -r mbed-os-env -t ${{ steps.build_info.outputs.DOCKER_PROD_TAG_LATEST }} -p ${{ matrix.platform }} )
          echo "::set-output name=DIGEST::$DIGEST"
          echo "Docker DIGEST: $DIGEST"

      - 
        name: Find DEV DOCKER DIGEST
        id: docker_info_dev
        run: |
          DIGEST=$(python ./ci_scripts/docker_hub_utils.py -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }} get-digest -r mbed-os-env -t ${{ steps.build_info.outputs.DOCKER_DEV_TAG }} -p ${{ matrix.platform }} )
          echo "::set-output name=DIGEST::$DIGEST"
          echo "Docker DIGEST: $DIGEST"

      - 
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # no need to continue if we already have the same image in dockehub
      # TODO: if this step errors, tag the dev image to failed.<dev_image> or similar
      #       if step is skipped, remove the dev image
      - if: steps.docker_info_prod.outputs.DIGEST != steps.docker_info_dev.outputs.DIGEST
        name: test the container
        id: test
        uses: addnab/docker-run-action@v2
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/mbed-os-env@${{ steps.docker_info_dev.outputs.DIGEST }}
          shell: bash
          run: |
            uname -m
            ./test.sh ${{ steps.build_info.outputs.MBED_OS_VERSION }}
            # set -e 
            # mbed import mbed-os-example-blinky
            # cd mbed-os-example-blinky
            # git checkout ${{ steps.build_info.outputs.MBED_OS_VERSION }}
            # mbed deploy 
            # mbed compile -m K64F -t GCC_ARM
            # echo "::set-output name=DEPLOY::true"
            
      
  deploy-container:
    runs-on: ubuntu-latest
    needs: test-container
    if: needs.test-container.outputs.DEPLOY == 'true'
        
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2

      - 
        name: unarchive artefacts
        uses: actions/download-artifact@v2
        with:
          name: build-info
        
      - 
        name: Get build info from archive
        shell: bash
        id: build_info
        run: |
          value=`cat dev_tag`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_DEV_TAG::$value"
          value=`cat prod_tag_dated`
          echo "TAG is $value"
          echo "::set-output name=DOCKER_PROD_TAG_DATED::$value"
          value=`cat prod_tag_latest`
          echo "::set-output name=DOCKER_PROD_TAG_LATEST::$value"
          
      - 
        name: copy dev tag to prod
        run: |
          docker run quay.io/skopeo/stable --src-creds=${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_PASSWORD }} --dest-creds=${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_PASSWORD }} copy --all docker://docker.io/${{ secrets.DOCKERHUB_USERNAME }}/mbed-os-env:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}  docker://docker.io/${{ secrets.DOCKERHUB_USERNAME }}/mbed-os-env:${{ steps.build_info.outputs.DOCKER_PROD_TAG_LATEST }}
          docker run quay.io/skopeo/stable --src-creds=${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_PASSWORD }} --dest-creds=${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_PASSWORD }} copy --all docker://docker.io/${{ secrets.DOCKERHUB_USERNAME }}/mbed-os-env:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}  docker://docker.io/${{ secrets.DOCKERHUB_USERNAME }}/mbed-os-env:${{ steps.build_info.outputs.DOCKER_PROD_TAG_DATED }}
          docker run quay.io/skopeo/stable --src-creds=${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_PASSWORD }} --dest-creds=${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_PASSWORD }} copy --all docker://docker.io/${{ secrets.DOCKERHUB_USERNAME }}/mbed-os-env:${{ steps.build_info.outputs.DOCKER_DEV_TAG }}  docker://docker.io/${{ secrets.DOCKERHUB_USERNAME }}/mbed-os-env:latest
      
      - 
        name: Delete Dev Tag
        run: |
          python ./ci_scripts/docker_hub_utils.py -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }} delete-tag -r mbed-os-env -t ${{ steps.build_info.outputs.DOCKER_DEV_TAG }}
